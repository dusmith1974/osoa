final, override, h in h
function order -> impl order && const fn && comments
keep unique_ptrs, pass ref for usage (keep owndership)
unnamed namespace for helper functions
factory functions for Init classes
127.0.0.1 not found (when not connected to network?)
failover services
const member functions
resolve all services in base class and keep sockets in service map
" for listening ports
mv Publish to Listen, Subscribe to Connect
sigslot to handle subscription feed
log comms cx/dx server
log errors
log connections
make requests to iterative server (from map) (connect)
use prog_opt implicit for default values
use prog_opt handlers()
prog_opt multitoken for pub/sub lists into vec
prog_opt env parser for username
mv unique_ptr shared_ptr
build as .a or .so and derive service (extend args version etc).
sockets api
rest api (for commands)
serializable object as base class (boost serialization or protobuf)
 protobuf-lite
xerces xml input msgs, xsd validation
service base class/template app
 ipc asio sockets
 c++11 thread slave/worker threads
pimpl log i/f -> boost log || pantheios
log utc time
makefile - warn if no $BOOST_DIR
auto inc build number http://www.linuxjournal.com/content/add-auto-incrementing-build-number-your-build-process
boost-python, plug-in to add func to items as passed through processor, pre/post hooks, filters
 gcsg vim settings (chromium embedded)
inputter(s)
processor(s)
outputter(s)
sqlite main db/cache
mq
gtest/gmock
book src repo - joss, etc.
 des patt
 loki
joss SOA.

cmd line filter app
gcov gprof
