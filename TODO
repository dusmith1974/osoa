mv abort handler from ws into service subclass (the app)
 sig_set, abort_handler_ etc into olap service run (new virt)
 service::start to call virtual run() func
  mv olap global run into new virt run
  on sigint join threads (log comms ws) stop io_services etc
  test with clean exit on short quick race


store and forward channel (as is)
pass through channel (delete msg after published)
 after read by all connected clients

swmr shared lock on map (1 map per topic)
wrap enum class in class for index into array w/o cast (SO duck)
pub/sub support different publications
 read on write, read will be subscriptions, eg. +timing -timing +core -core
try_lexical_cast (with optional)
boost serialization (built in hpp for vector map)
 a practical guide to c++ serialization
thread for comms, asio post req to thread, callback in handler to pass to ui thread. (cpp11/chat_client)
thread pool and strand (echo_server)
-s third : into subscriptions vec, and make subscriptions
async resolve and re-try with logging
http async client for sub rec
boost channel for pub/sub (when avail)..
typedefs for containers
html5/css3/js http://software.intel.com/en-us/html5/tools for frontend timing screen
ipico tags, lite/elite cycle antenna
http://www.fia.com/championship/fia-formula-1-world-championship/2013/2013-australian-grand-prix-event-information
spellchecker for comments
comms - test connect 1ps and break network, re-connect?, log-error?
log comms cx/dx server
log errors
log connections
comms - direct error msgs to cerr
utilities.h
valgrind script accept args
ref.cc ref.h + check against sources
resolve, don't continue, fail
error codes enum k, cerr
function order -> impl order && const fn && comments
keep unique_ptrs, pass ref for usage (keep owndership)
factory functions for Init classes
failover services
const member functions
sigslot to handle subscription feed
use prog_opt implicit for default values
use prog_opt handlers()
prog_opt env parser for username
build as .a or .so and derive service (extend args version etc).
sockets api
rest api (for commands)
serializable object as base class (boost serialization or protobuf)
 protobuf-lite
xerces xml input msgs, xsd validation
service base class/template app
 ipc asio sockets
 c++11 thread slave/worker threads
pimpl log i/f -> boost log || pantheios
log utc time
makefile - warn if no $BOOST_DIR
auto inc build number http://www.linuxjournal.com/content/add-auto-incrementing-build-number-your-build-process
boost-python, plug-in to add func to items as passed through processor, pre/post hooks, filters
 gcsg vim settings (chromium embedded)
inputter(s)
processor(s)
outputter(s)
sqlite main db/cache
mq
gtest/gmock
book src repo - joss, etc.
 des patt
 loki
joss SOA.

cmd line filter app
gcov gprof
